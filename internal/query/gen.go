// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Device:    newDevice(db),
		DeviceAck: newDeviceAck(db),
		Gid:       newGid(db),
		Group:     newGroup(db),
		GroupUser: newGroupUser(db),
		Message:   newMessage(db),
		User:      newUser(db),
	}
}

type Query struct {
	db *gorm.DB

	Device    device
	DeviceAck deviceAck
	Gid       gid
	Group     group
	GroupUser groupUser
	Message   message
	User      user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Device:    q.Device.clone(db),
		DeviceAck: q.DeviceAck.clone(db),
		Gid:       q.Gid.clone(db),
		Group:     q.Group.clone(db),
		GroupUser: q.GroupUser.clone(db),
		Message:   q.Message.clone(db),
		User:      q.User.clone(db),
	}
}

type queryCtx struct {
	Device    deviceDo
	DeviceAck deviceAckDo
	Gid       gidDo
	Group     groupDo
	GroupUser groupUserDo
	Message   messageDo
	User      userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Device:    *q.Device.WithContext(ctx),
		DeviceAck: *q.DeviceAck.WithContext(ctx),
		Gid:       *q.Gid.WithContext(ctx),
		Group:     *q.Group.WithContext(ctx),
		GroupUser: *q.GroupUser.WithContext(ctx),
		Message:   *q.Message.WithContext(ctx),
		User:      *q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
